Trabalhando com collections java


Collections

- É um objeto que agrupa vários elementos dentro de uma única unidade
- Serve para armazenar e processar conjuntos de dados de forma eficiente
- Antes do java 2, a implementação de collections incluía poucas classes e não tinha a organização de um framework 

Composição de collection

- Interfaces: é um contrato que quando assumido por uma classe deve ser implementado
- Implementações ou classes: são as materializações, a codificação da interface
- Algotirmo: sequência lógica finita e definida de instruções que devem ser seguidas para resolução de um problema 



List

- import java.util.List
- Permite elementos duplicados e garante ordem de inserção 
- ArrayList deve ser usado onde mais operações de pesquisa são necessárias, e LinkedList deve ser usado onde mais operações de inserção e exclusão 
são necessárias
- ArrayList usa um array para guardar os elementos inseridos, e a LinkedList utiliza uma estrutura chamada lista duplamente ligada 
- A classe ArrayList implementa a interface List, e a classe LinkedList implementa  List e a Queue


Métodos 

List<Double> notas = new ArrayList<Double>();

notas.add(7.0);   //0
notas.add(8.5);   //1
notas.add(9.3);   //2
notas.add(5.0);   //3

notas.indexOf(5.0);   //3

notas.add(3, 8.0);   //{7.0 , 8.5 , 9,3 , 8.0 , 5,0}

notas.set(notas.indexOf(5.0), 6.0);   //{7.0 , 8.5 , 9,3 , 8.0 , 6,0}

notas.contains(5.0);   //false

Imprimir ArrayList:
for(Double nota : notas) System.out.println(nota);

notas.get(2);   //9.3

Collections.min(notas);   //6.0

Collections.max(notas);   //9.3

Para somar os valores:
Iterator<Double> iterator = notas.iterator();
Double soma = 0d;
while(iterator.hasNext()){
  Double next = iterator.next();
  soma += next;
}
System.out.println("Exiba a soma dos valores: " + soma);

notas.size();   //5

notas.remove(8.5);   //{7.0 , 9,3 , 8.0 , 6,0}

notas.remove(1);   //{7.0 , 8.0 , 6,0}

Remover as notas menores que 7.0:
Interator<Double> interator1 = notas.iterator();
while(interator1.hasNext()){
  Double next = interator1.next();
  if(next < 7.0) interator1.remove();
}
System.out.println(notas);   //{7.0 , 8.0}

notas.clear();   //{}

notas.isEmpty();   //true


implementar comparable para utilizar sort()
Comparator interface para comparar e utilizar o método sort() 
nomes.sort(new ClassComparator());
Collections.sort(nomes);



Set

- java.util.set
- Não permite elementos duplicados
- Não possui índice 
- HashSet utiliza a implementação HashMap para poder armazenar os elementos, a LinkedHashSet utiliza a LinkedHashMap, e o TreeSet utiliza o TreeMap
- HashSet não mantém a ordem dos elementos, LinkedHashSet mantém a ordem de inserção, e o TreeSet mantém a ordem natural dos elementos 
- HashSet tem uma melhor performance, e o TreeSet tem a pior performance entre os 3
- O HashSet é o LinkedHashSet permitem no máximo um elemento null, enquanto que no TreeSet não é permitido nenhum


Métodos 

Set<Double> notas = new HashSet<>(Arrays.asList(7.0, 8.5, 9.3, 5.0, 7.0, 0d, 3.6));
System.out.println(notas.toString());   //{0.0, 9.3, 7.0, 5.0, 3.6, 8.5}

notas.contains(5.0);   //true

Collections.min(notas);   //0.0

Collections.max(notas);   //9.3

Iterator<Double> iterator = notas.iterator();
Double soma = 0.0;
while(iterator.hasNext()){
  Double next = iterator.next();
  soma += next;
}
System.out.println(soma);   //33.4

notas.size();   //6

notas.remove(0.0);   //remove 0.0

Iterator<Double> iterator1 = notas.iterator();
while(iterator1.hasNext()){
  Double next = iterator1.next();
  if(next < 7) iterator1.remove();
}
System.out.println(notas);   //remove menores que 7


LinkedHashSet

Set<Double> notas2 = new LinkedHashSet<>();
notas2.add(7d);
notas2.add(9d);
notas2.add(0d);
System.out.println(notas2);   //{7.0, 9.0, 0.0}


TreeSet

Set<Double> notas3 = new TreeSet<>(notas2);
System.out.println(notas3);    //{0.0, 7.0, 9.0} ordem crescente pq classe Double tem Comparable


notas.clear();   //apaga os elementos 

notas.isEmpty();   //true

notas2.addAll(notas);



Map

- java.util.Map
- Não extende da interface collections, é um objeto que permite colocar múltiplos elementos 
- Possui elementos únicos key para cada valor value
- O HashMap e o LinkedHashMap tem a mesma performance, porém o TreeMap demora mais
- Assim como no Set, a ordem de iteração no HashMap é randômica, do LinkedHashMap é por ordem de inserção e do TreeMap é por ordem natural
- O HashMap e o LinkedHashMap aceitam chaves nulas, já o TreeMap não permite
- Não são sincronizaveis  mas pode-se usar "Collections.synchronizedMap()" para sincronizar
- Na estrutura de dados o HashMap utiliza o list of buckets, o LinkedHashSet utiliza Doubly Linked List of Buckets e o TreeMap utiliza Red-Black Tree
- Equals() e hashCode() precisam ser sobreescritas 


Métodos

Map<String, Double> carrosPopulares = new HashMap<>(){{
  put("gol", 14.4);
  put("uno", 15.6);
  put("mobi", 16.1);
  put("hb20", 14.5);
  put("kwid", 15.6);
}};
System.out.println(carrosPopulares,toString());   //{gol=14.4, kwid=15.6, uno=15.6, hb20=14.5, mobi=16.1}

carrosPopulares.put(gol, 15.2);   //{gol=15.2}

carrosPopulares.containsKey("tucson");   //false

carrosPopulares.get("uno");   //15.6

carrosPopulares.ketSet();   //retorna um Set

carrosPopulares.values();   //retorna uma collection

Collections.max(carrosPopulares.values());   //16.1

Set<Map.Entry<String, Double>> entries = carrosPopulares.entrySet();   //trabalha com chave e valor de forma separada

String modeloMaisEficiente = "";
for(Map.Entry<String, Double> entry: entries){
  if(entry.getValue().equals(consumoMaisEficiente)){
    modeloMaisEficiente = entry.getKey();
    System.out.println("Modelo mais eficiente: " + modeloMaisEficiente  + " - " + consumoMaisEficiente);    //mobi - 16.1
  }
}

Double consumoMenosEficiente = Collections.min(carrosPopulares.values());
String modeloMenosEficiente = "";
for(Map.Entry<String, Double> entry: carrosPopulares.entrySet()){
  if(entry.getValue().equals(consumoMenosEficiente)){
    modeloMenosEficiente = entry.getKey();
    System.out.println("Modelo menos eficiente: " + modeloMenosEficiente  + " - " + consumoMenosEficiente);    //gol - 14.4
  }
}

Iterator<Double> iterator = carrosPopulares.values().iterator();
Double soma = 0d;
while(iterator.hasNext()){
  soma += iterator.next();
}
System.out.println(soma);   //77.0


carrosPopulares.size();   //quatidade 5


Iterator<Double> iterator1 = carrosPopulares.values().iterator();
while(iterator1.hasNext()){
  if(iterator1.next().equals(15.6)) iterator1.remove();
}
System.out.println(carrosPopulares);   //{gol=14.4, hb20=14.5, mobi=16.1}


Map<String, Double> carrosPopulares1 = new LinkedHashMap<>(){{
  put("gol", 14.4);
  put("uno", 15.6);
  put("mobi", 16.1);
  put("hb20", 14.5);
  put("kwid", 15.6);
}};
System.out.println(carrosPopulares1,toString());   //{gol=14.4, uno=15.6, mobi=16.1, hb20=14.5, kwid=15.6}


Map<String, Double> carrosPopulares2 = new TreeMap<>(carrosPopulares1);
System.out.println(carrosPopulares2,toString());   //{gol=14.4, hb20=14.5, kwid=15.6, mobi=16.1, uno=15.6}

carrosPopulares.clear();   //apaga elementos 

carrosPopulares.isEmpty();   //true
    


Java streams


Classe anônima 

- classe que não recebe um nome e é declarada e instanciada em uma única instrução
- quando se quer criar uma classe que será instanciada apenas uma vez

meusGatos.sort( new Comparator<Gato>(){
   @override
   public int compare(Gato g1, Gato g2){
      return;
   }
}


Functional Interface

- qualquer interface com um Single Abstract Method (SAM) é uma interface funcional e sua implementação pode ser tratada como expressões lambda

@Functionallnterface
public interface Comparator<T> {
   @Contract(pure = true) int compare(T var1, T var2);
}

- Comparator
- Consumer
- Function
- Predicate


Lambda

- é uma função sem declaração, que não é necessário colocar um nome, um tipo de retorno e um modificador de acesso.
- o método é declarado no mesmo lugar que será usado
- as funções lambda em java tem a sintaxe definida como (argumento) -> (corpo)


Reference Method

- é um novo recurso do Java 8 que permite fazer referência a um método ou Construtor de uma classe e indicar que ele deve ser utilizado
num ponto específico do código
- para utilizar basta informar uma classe ou referência seguida do símbolo '::' e o nome do método sem os parênteses no final 

meusGatos.sort(Comparator.comparing(Gato::getNome));


Stream APIs

- Traz uma nova opção para a manipulação de coleções em java seguindo os princípios da programação funcional
- Combinada com expressões lambda, ela proporciona uma forma diferente de lidar com conjuntos de elementos, oferecendo ao desenvolvedor uma maneira
simples e concisa de escrever que resulta em facilidade de manutenção e paralelização sem efeitos indesejados em tempo de execução
- Source -> Collection
- Pipeline -> operações intermediárias
- Terminal -> operação final



