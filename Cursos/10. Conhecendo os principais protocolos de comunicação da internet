Conhecendo os principais protocolos de comunicação da internet


Protocolo HTTP 

- HyperText Transfer Protocol
- Definido pelos RFCs 1945 e 2116
- Protocolo de comunicação entre cliente e servidor 
- Browser -> implementar o cliente HTTP 
- Servidor-> host objetos web 

Arquitetura client-server 
- stateless - responde sempre que necessário - não mantém estado do cliente
- Cliente -> mensagens - request HTTP - objetos web
- Servidor -> mensagens - response HTTP - Protocolo TCP - controle de fluxo 


Versões do HTTP 
- 1991: HTTP 0.9 - 1° webpage
- 1996: HTTP 1.0
- 1997: HTTP 1.1 - Mudanças na web: CORS e Keep-Alive
- 2012: SPDY
- 2015: HTTP 2.0


Mensagens HTTP 

Request e Response
- Get: quando precisa pegar algum conteúdo em site - get:https://www.amazon.com.br
- Post: Não só para buscar uma página mas também para enviar um conteúdo para o servidor- Post:https://www.amazon.com.br/cadastro
- OK: Responde a requisição pedida


O corpo de um Protocolo HTTP 
- Composto por XML e JSON
- XML: Armazenamento e transmissão 
- JSON: Reconstrução 
- Content-type: determina o tipo de dado 
- O objetivo do XML é a serialização dos dados, comunicação e adição de metadados
- O JSON é baseado no javascript e é lightweight(fácil estrutura), independente de linguagem de programação e simples

Comum a XML e JSON 
- Auto-descritivos
- Hierárquicos
- Independentes de linguagem de programação 
- Vasta utilização 

Diferenças entre XML e JSON 
- XML utiliza tags, JSON utiliza o modelo Java 
- XML é mais complexo e muito utilizado, e o JSON é simples e permite utilizar vetores

Qual utilizar para serialização?
- Aplicações leves - JSON 
- Complexo com utilização de metadados - XML 


Particularidades do HTTP versão 1.1
- Comunicação de três vias: Syn, Syn Ack, Ack
- TCP: Transmission Control Protocol - Persistente (mantém conexão ativa) ou não-persistente (encerra depois de receber)
- Enviar request e esperar resposta e bloquear qualquer requisição até vir a resposta 
- Browser faz até 6 requisição simultaneamente 
- Problema com repetição de dados: cabeçalho repetitivo - over head


Request e Response 

Request
- Estrutura: Texto em ASCII, Request line e Header line

Request line: 
- Método: get ou post (mais usados)
   -Get (seguro), Head (seguro), Post, Put, Delete, Trace, Option (seguro), Connect, Patch
- URL 
- Versão do HTTP 

Header line
- Host: url
- Connection: close (não persistente) ou Persistente 
- User-agent: quem está realizando a requisição (browser)
- Accept: tipos de dados que aceita receber
- Accept-language: a linguagem adotada
- Accept-Enconding: aceita codificação 
- Contente-type: tipo de conteúdo recebido
- Content-length: tamanho do conteúdo 


Response
-Estrutura: Status line, Header lines e Entity body

Status line
- Versão do protocolo 
- Status code: 200 OK, 301 Móvel permanently, 400 Bad request, 404 Not found, 505 HTTP Version not supported 
- Status da mensagem 

Classificação do status code
- Information: 100 - 199
- Successful: 200 - 299
- Redirection: 300 - 399
- Client error: 400 - 499
- Server error: 500 - 599

WebDav (Web Distributed Authoring and Versioning)
- 102: Processando
- 207: Multi-status
- 208: Already reported
- 422: Unprocessable entity
- 423: Locked
- 424: Filed Dependency
Permite:
- Webpage meta: add, deletar, retrieve
- Link pages
- Criação com conjunto de documentos 
- Copy e Move
- Lock: documento editado - 1

Client usando WebDav
- Lock
- Propfind 
- Get
- Put
- Unlock

Header lines (response)
- Conexão encerrada
- Dados da mensagem 
   - Data, servidor, ...
- Content-type
   - Tipo de dado

Campos 
- Entity header
- Entity body


Cookies e Cache

Cookie
- Pequenos pedaços ou blocos de dados criados e utilizados pelo servidor para persistir dados no dispositivo do cliente
- Rastrear informações do cliente 
- Estão dentro do header file
- Cookies de sessão: Quando a sessão se encerra os cookies são deletados da memória
- Cookies persistentes: São mantidos por meses ou até anos  dentro do dispositivo 

Cashing
- Proxy server que serve como intermediário que guarda e manda requisições para evitar over head 
- Proxy server atualiza checando se chegou novas requisições no HTTP server
- Há uma redução do tempo de resposta e redução do tráfego 

HTTP 2.0 Atualizações do protocolo 
- Multiplexação: Faz várias requisições 
- Priorização de recursos/requisições 
- Segmentação/Streaming: Streaming ID Header separado do Streaming ID Data
- Reutilização do header
- Push: envia tudo o que precisa sem requisição direta do cliente, porém não é habilitado por padrão/default e configurado para o cliente 
- Características:
  > Única conexão persistente 
  > Compressão de header
  > Server push
  > HTTPS por padrão - TLS
  > Negociação no handshake (para o cliente)
- Contras
  > push: configuração incorreta
  > Mix 1.1 e 2.0: Lentidão e Load Balancer apenas para o 1.1
  
  
Servidores/ Sistemas de aplicação 

APACHE - Servidor
- Datado de 1995
- Contribuição com WWW
- Open source e free
- Comunidade: APACHE Software Foundation
- Modular, dinâmico e carregável 
- Multiple Request Processing Modes (MPMs)
- Altamente escalável  (+ 10000 conexões simultâneas - fácil)
- Lida com arquivos estáticos, index, auto-indexing e negociação de conteúdo 
- TSL/SSL via OpenSSL ou WolfSSL
- Servidores virtuais com endereços baseados em IP ou nome
- Compatibilidade com IPv6
- Suporte à versão 2.0 do HTTP 
- Proxy reverso, Websocket...

XAMPP - Pacote/Ambiente
- Utiliza APACHE server
- Vem configurado com APACHE server, MariaDB, interpretadores script para PHP e Perl 
- Diversos módulos: Openssl, phpMyAdmin, MediaWki, Joomla, WordPress...
- Voltado para teste e desenvolvimento, sem acesso a Internet com uma série de parâmetros de segurança desabilitados

NGINX - Servidor
- WebServer 2004
- Proxy reverso 
- Load Balancer 
- Mail Proxy 
- HTTP Cache
- +10 mil conexões simultâneas 
- Lida com arquivos estáticos, index, auto-indexing
- TLS/SSL com SNI via OpenSSL 
- Suporte à HTTP 2.0 
- Compatível com IPv6
- FastCGI SCGI, uWCGI com cache
- Suporte à gRPC (v. 1.13.10)
- Servidores virtuais baseados em IP e nome
- WebSocket desde 1.3.13
- URL rewriting and redirection[35][36]


Segurança da informação 

Criptografia por chave
- Arquivo criptografado por chave, mapeado para ficar ilegível, só fica legível por chave
- Dois tipos: Assimétrica e simétrica 
- Assimétrica
   > Chave privada: Assinatura - criptografia
   > Chave pública: Verificação de autenticidade
- Simétrica
   > Chave única privada: Conhecimento prévio da chave
   > Tipos: cifra de fluxo e cifra de bloco
- Cifra de fluxo: Sequência de bits pseudo-aleatório com mapeamento de 1 para 1, tornando dados cifrados
- Cifra de bloco: Blocos de bits permutados com mapeamento de 1 para 1, mascarando a informação 

Certificado digital
- Certificação de chave pública 
- É através do certificado que uma entidade certificadora pode comprovar
- O papel da entidade é verificar a identidade e a emissão de certificados
- Possui padrões:
   > IETF - recomendação ITUX.509
   > RFC 1422


Protocolo SSL(Secure Socket Layer)
- Segurança para conexões TCP 
- Confidencialidade
- Integridade
- Autenticidade end-point
- TLS é a terceira versão do SSL
- Sopode ser lido por quem tem a chave

Operações do SSL
- 3 fases: Handshake, Key Derivation e Data Transfer

Handshake
- Estabelece a conexão TCP: TCP start, TCP response, TCP confirmation
- Verificação de autenticidade: SSL Hello, Certificação
- Envio da Master Secret Key: EMS = KB + MS

Key Derivation
- Master Secret Key
- Session encryption key
- Verificação da chave MS

Data Transfer
- Transferência efetiva dos dados
- Record+Mac: Verificação de integridade de mensagem 
- Data Stream = Record + Mac -> Sendo acessado pela chave da sessão 

HTTPS
- HTTP + SSL - Segurança na comunicação - Over TCP 
- Verificação da autenticidade por certificados digitais por porta 443
- Maioria dos sites utilizam a versão segura
- Proteção contra fishing
- Privacidade 

LGPD
- Lei Geral de Proteção de Dados
- Promulgada em 2018
- Entrou em vigor em agosto de 2020
- Lei de segurança da informação 
- N° 13.709/2018
- Baseado na legislação europeia - GDPR
- Baseado também na legislação do estado da Califórnia - EUA
- A lei protege:
   > Dados de identificação dos usuários 
   > Dados sensíveis: religião,  etnia
- Define o tratamento dos dados em diversos tipos de operação 
- Livre consentimento 
- Direito do titular das informações 
- Sanções aos que descumprirem as regras
- Deve seguir a lei empresas que precisam manter um BD de funcionários e usuários, garantindo sigilo nos dados
- A ANPD (Agência Nacional de proteção de dados) zela pela proteção, elabora diretrizes, promove conhecimento, edita regulamento e realiza
auditorias



Websocket 
- Implementa via API uma conexão no HTTP bidirecional entre o usuário e o servidor 
- Utiliza a infraestrutura do HTTP 
- Porta 80 e 443 pro Websocket 
- Voltado para aplicações de tempo real com várias informações e requisições 
- Independente do TCP 

Como funciona
- Handshake
Handshake de duas vias: Syn, Syn Ack
Servidor HTTP tratando conexão com as regras de um Websocket e utilização de cookies

- Data Transfer 
Transferência dos dados

- O protocolo Websocket fornece comunicação cliente/servidor executando um código não confiável em um ambiente controlado para o host que escolheu 
essa comunicação 
- Modelo utilizado é o origin-base security
- Apenas aceita JSON 
- É enviado uma mensagem de fechamento para o servidor e ele envia uma confirmação 

Filosofia do Websocket 
- Origin-base security model
- Endereçamento e protocolo
- Camadas -> enquadramento on top TCP 
- Encerramento do Handshake 



Como funciona a comunicação na Internet 
- Quando o cliente vai iniciar uma conexão, ele envia um pacote para o DNS para ter a informação do IP de um domínio específico 
- Quando vai iniciar uma conexão HTTP com o domínio, primeiro inicia uma conexão com o socket via camada de transporte como TCP que há uma 
identificação IP e porta com a conexão do HTTP 
- Quando tem um proxy, o proxy envia para o servidor o que ele pediu se estiver em cache. se não, ele fará um update das informações com conexão 
ao servidor e repassar para o cliente via payload 
- Quando há várias clientes diferentes fazendo várias conexões simultâneas há o load balancer que pode fazer distribuição de carga, distribuindo para
os servidores disponíveis, e fazendo Multiplexação de várias requisições em uma mesma conexão, enviando depois ao cliente



